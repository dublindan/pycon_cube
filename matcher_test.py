import unittest
from matcher import Matcher
from possibility import Possibility

class MatcherTest(unittest.TestCase):

	def setUp(self):
		self.matcher = Matcher()

	def test_it_should_be_able_to_create_instance(self):
		self.assertEquals(Matcher, self.matcher.__class__)

	def test_it_should_be_able_to_say_that_this_is_the_solution(self):		
		p = Possibility([
			0b1110000000000000111110000000000011100000000000001110000010000000, 
			0b0000000000110011111001100000000011100000000000001110000101000000, 
			0b0000001110000000111000011000000011100000000000001110001000100000, 
			0b0000110000000000111000000110000011100000000000001110010000010000,
			0b0001000001000000111000000001000011100000000000001110100000001000, 
			0b0000000000001100111000000000110011100000000000001111000000000100, 
			0b0000000000000000111000000000001111100000000000001110000000000010, 
			0b0000000000000000111000000000000011110000000000011110000000000000,
			0b0000000000000000111000000000000011101100000000101110000000000001, 
			0b0000000000000000111000000000000011100010000001001110000000000000, 
			0b0000000000000000111000000000000011100001000010001110000000000000, 
			0b0000000000000000111000000000000011100000100100001110000000000000,
			0b0000000000000000111000000000000011100000011000001110000000000000
		])
		self.assertEquals(True, self.matcher.match(p))

	def test_it_should_be_able_to_say_that_this_pieces_are_fitting(self):
		self.assertEquals(True, self.matcher.areTheyFitting(
			0b1110000000000000111110000000000000000000000000000000000000000000, 
			0b0001100000000000000001100000000000000000000000000000000000000000
		))

	def test_it_should_be_able_to_say_which_pieces_are_fitting(self):		
		p = Possibility([
			0b1111100000000000000000000000000000000000000000000000000000000000, 
			0b0000011111000000000000000000000000000000000000000000000000000000, 
			0b0000000000111110000000000000000000000000000000000000000000000000, 
			0b0000000000000001111100000000000000000000000000000000000000000000,
			0b0000000000000000000011111000000000000000000000000000000000000000, 
			0b0000000000000000000000000111110000000000000000000000000000000000, 
			0b0000000000000000000000000000001111100000000000000000000000000000, 
			0b0000000000000000000000000000000000011111100000000000110000000000,
			0b0000000000000000000000000000000000001110000000000000001101000000, 
			0b0000000000000000000000000000000000000000001111110000000011100000, 
			0b0000000000000000000000000000000000000000000001100000000000011100, 
			0b0000000000000000000000000000000000000000000000000000000000000111,
			0b0000000000000000000000000000000000000000011100000000000001110000
		])
		self.matcher.evaluate(p)
		self.assertEquals([
			0b1111100000000000000000000000000000000000000000000000000000000000, 
			0b0000011111000000000000000000000000000000000000000000000000000000, 
			0b0000000000111110000000000000000000000000000000000000000000000000, 
			0b0000000000000001111100000000000000000000000000000000000000000000,
			0b0000000000000000000011111000000000000000000000000000000000000000,			
			0b0000000000000000000000000111110000000000000000000000000000000000,			
			0b0000000000000000000000000000001111100000000000000000000000000000, 
			0b0000000000000000000000000000000000011111100000000000110000000000,
			0b0000000000000000000000000000000000000000001111110000000011100000, 
			0b0000000000000000000000000000000000000000000000000000000000000111
		].sort(), p.pieces_fitted.sort())
	

if __name__ == '__main__':
	unittest.main()
